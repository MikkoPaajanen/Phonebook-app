{"version":3,"sources":["services/persons.js","app.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","delete","put","Person","props","person","number","onClick","removeName","Form","onSubmit","addPerson","value","newName","onChange","handleNameChange","newNumber","handleNumberChange","type","Filter","nameExists","handleFilter","Notification","message","className","ErrorNotification","App","useState","persons","setPersons","setNewName","setNewNumber","setNameExists","succesfulMessage","setSuccesfulMessage","errorMessage","setErrorMessage","useEffect","personService","initialPersons","event","target","preventDefault","find","name","window","confirm","personUpdate","changedNumber","returnedNumber","map","setTimeout","catch","error","personObject","concat","console","log","filter","toLocaleLowerCase","includes","key","who","n","removeNameOf","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0e1d887f.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n}\n\nconst create = newObject => {\n    const request = axios.post(baseUrl, newObject)\n    return request.then(response => response.data)\n}\n\nconst remove = id => {\n    return axios.delete(`${baseUrl}/${id}`)\n}\n\nconst update = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\n    return request.then(response => response.data)\n}\n\nexport default { getAll, create, remove, update }","import React, { useState, useEffect } from 'react';\nimport personService from './services/persons'\n\n\nconst Person = (props) => {\n    return (\n        <tbody>\n            <tr>\n                <td>{props.person}</td>\n                <td>{props.number}</td>\n                <td><button onClick={props.removeName}>Delete</button></td>\n            </tr>\n        </tbody>\n    )\n}\n\nconst Form = (props) => {\n    return (\n    <form onSubmit={props.addPerson}>\n        <div>\n            Name: <input \n            value={props.newName} \n            onChange={props.handleNameChange}\n            />\n        </div>\n        <div>\n            Number: <input \n            value={props.newNumber}\n            onChange={props.handleNumberChange}\n            />\n        </div>\n        <div>\n            <button type=\"submit\">Add</button>\n        </div>\n    </form>\n    )\n}\n\nconst Filter = (props) => {\n    return (\n        <div> \n            Filter shown with: <input type=\"text\" value={props.nameExists} onChange={props.handleFilter}/>\n        </div>\n    )\n}\n\nconst Notification = ({ message }) => {\n    if (message === null) {\n        return null\n    }\n    return (\n        <div className=\"succesful\">{message}</div>\n    )\n}\n\nconst ErrorNotification = ({ message }) => {\n    if (message === null) {\n        return null\n    }\n    return (\n        <div className=\"error\">{message}</div>\n    )\n}\n\nconst App = () => {\n    const [ persons, setPersons] = useState([])\n    const [ newName, setNewName ] = useState('')\n    const [ newNumber, setNewNumber ] = useState('')\n    const [ nameExists, setNameExists ] = useState('')\n    const [ succesfulMessage, setSuccesfulMessage ] = useState(null)\n    const [ errorMessage, setErrorMessage ] = useState(null)\n\n    useEffect(() => {\n        personService\n            .getAll()\n            .then(initialPersons => {\n                setPersons(initialPersons)\n            })\n    }, [])\n\n    const addPerson = (event) => {\n        event.preventDefault()\n        if(persons.find( person => person.name === newName)){\n            if (window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`)){\n                const personUpdate = persons.find( person => person.name === newName)\n                const changedNumber = {...personUpdate, number: newNumber}\n                personService\n                    .update(personUpdate.id, changedNumber)\n                    .then(returnedNumber => {\n                        setPersons(persons.map(person => person.id !== personUpdate.id ? person : returnedNumber))\n                        setNewName('')\n                        setNewNumber('')\n                        setSuccesfulMessage(\n                            `Added new number for ${personUpdate.name}`\n                        )\n                        setTimeout(() => {\n                            setSuccesfulMessage(null)\n                        }, 6000)\n                    })\n                    .catch(error => {\n                        setErrorMessage(\n                            `Information of ${personUpdate.name} has already been removed from server `\n                        )\n                        setTimeout(() => {\n                            setErrorMessage(null)\n                        }, 6000)\n                    })\n            }\n            setNewName('')\n            setNewNumber('')\n        }else {\n            const personObject = { name: newName, number: newNumber}\n            personService\n                .create(personObject)\n                .then(initialPersons => {\n                    setPersons(persons.concat(initialPersons))\n                    setNewName('')\n                    setNewNumber('')\n                    setSuccesfulMessage(\n                        `Added ${personObject.name}`\n                    )\n                    setTimeout(() => {\n                        setSuccesfulMessage(null)\n                    }, 6000)\n                })\n                .catch(error => {\n                    setErrorMessage(`${error.response.data.error}`)\n                    console.log(error.response.data)\n                })\n        }   \n    }\n\n    const removeNameOf = (id) => {\n        const who = persons.find(n => n.id === id)\n        //console.log(\"who am I\", who)\n        if(window.confirm(`Delete ${who.name}`)) {\n            personService\n                .remove(who.id)\n                .then(response => {\n                    setSuccesfulMessage(\n                        `${who.name} was deleted`\n                    )\n                    setTimeout(() => {\n                        setSuccesfulMessage(null)\n                    }, 6000)\n                })\n                .catch(error => {\n                    setSuccesfulMessage(\n                        `${who.name} was already deleted`\n                    )\n                    setTimeout(() => {\n                        setSuccesfulMessage(null)\n                    }, 6000)\n                })\n        }\n    }\n\n    const filterPhonebook = () => {\n        const results = persons.filter(person => person.name.toLocaleLowerCase().includes(nameExists))\n        const filtered = () => results.map(person =>\n            <Person\n            key={person.name}\n            person={person.name}\n            number={person.number}\n            removeName={() => removeNameOf(person.id)}\n            />\n            )\n        return filtered()\n    }\n\n    const handleNameChange = (event) => {\n        setNewName(event.target.value)\n    }\n    const handleNumberChange = (event) => {\n        setNewNumber(event.target.value)\n    }\n    const handleFilter = (event) => {\n        setNameExists(event.target.value)\n    }\n\n    return (\n        <div>\n            <h2>Phonebook</h2>\n            <Notification message={succesfulMessage}/>\n            <ErrorNotification message={errorMessage}/>\n            <div>\n                <Filter handleFilter={handleFilter}/>\n            </div>\n            <h2>Add new number</h2>\n            <div>\n                <Form \n                addPerson={addPerson}\n                handleNumberChange={handleNumberChange}\n                handleNameChange={handleNameChange}\n                newName={newName}\n                newNumber={newNumber}\n                />\n            </div>\n            <h2>Numbers</h2> \n            <table>\n                {filterPhonebook()}\n            </table>\n        </div>\n\n    )\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app'\nimport './index.css'\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n"],"sourceRoot":""}